version: "3.9"
services:
  repaint-game-postgres:
    image: library/postgres:${POSTGRES_REPAINT_GAME_IMAGE_TAG:-14}
    container_name: ${POSTGRES_REPAINT_GAME_CONTAINER_NAME:-repaint-game-postgres}
    restart: on-failure
    environment:
      POSTGRES_USER: ${POSTGRESQL_REPAINT_GAME_USER}
      POSTGRES_PASSWORD: ${POSTGRESQL_REPAINT_GAME_PASS}
      POSTGRES_DB: ${POSTGRESQL_REPAINT_GAME_DB}
    volumes:
      - ./db/repaint-game/data:/var/lib/postgresql/data
      - ./db/repaint-game/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: pg_isready -d ${POSTGRESQL_REPAINT_GAME_DB} -U ${POSTGRESQL_REPAINT_GAME_USER}
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    ports:
      - ${POSTGRESQL_REPAINT_GAME_PORT:-5436}:5432
    deploy:
      resources:
        limits:
          memory: 256M
    networks:
      - repainting-network

  user-posts-postgres:
    image: library/postgres:${POSTGRES_USERS_POSTS_IMAGE_TAG:-14}
    container_name: ${POSTGRES_USERS_POSTS_CONTAINER_NAME:-user-posts-postgres}
    restart: on-failure
    environment:
      POSTGRES_USER: ${POSTGRESQL_USERS_POSTS_USER}
      POSTGRES_PASSWORD: ${POSTGRESQL_USERS_POSTS_PASS}
      POSTGRES_DB: ${POSTGRESQL_USERS_POSTS_DB}
    volumes:
      - ./db/users-posts/init:/docker-entrypoint-initdb.d
      - ./db/users-posts/data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -d ${POSTGRESQL_USERS_POSTS_DB} -U ${POSTGRESQL_USERS_POSTS_USER}
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    ports:
      - ${POSTGRESQL_USERS_POSTS_PORT:-5437}:5432
    deploy:
      resources:
        limits:
          memory: 256M
    networks:
      - user-posts-network

  keycloak-postgres:
    image: library/postgres:${POSTGRES_KEYCLOAK_IMAGE_TAG:-14}
    container_name: ${POSTGRES_KEYCLOAK_CONTAINER_NAME:-keycloak-postgres}
    restart: on-failure
    environment:
      POSTGRES_USER: ${POSTGRESQL_KEYCLOAK_USER}
      POSTGRES_PASSWORD: ${POSTGRESQL_KEYCLOAK_PASS}
      POSTGRES_DB: ${POSTGRESQL_KEYCLOAK_DB}
    volumes:
      - ./keycloak/data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -d ${POSTGRESQL_KEYCLOAK_DB} -U ${POSTGRESQL_KEYCLOAK_USER}
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    ports:
      - ${POSTGRESQL_KEYCLOAK_PORT:-5435}:5432
    deploy:
      resources:
        limits:
          memory: 256M
    networks:
      - keycloak-network

  keycloak:
    image: quay.io/keycloak/keycloak:${KEYCLOAK_VERSION}
    container_name: keycloak
    command:
      - start --auto-build --db postgres --hostname-strict-https false --hostname-strict false --proxy edge --http-enabled true --import-realm --spi-user-profile-legacy-user-profile-read-only-attributes *_RES_ACCESS_MODE
    environment:
      KC_DB_URL: jdbc:postgresql://keycloak-postgres:5432/${POSTGRESQL_KEYCLOAK_DB}
      KC_DB_USERNAME: ${POSTGRESQL_KEYCLOAK_USER}
      KC_DB_PASSWORD: ${POSTGRESQL_KEYCLOAK_PASS}
      KC_DB_SCHEMA: public
      KC_FEATURES: preview
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
    volumes:
      - type: bind
        source: ./keycloak/import/realm-export.json
        target: /opt/keycloak/data/import/realm-export.json
        read_only: true
    ports:
      - 8282:8080
    depends_on:
      keycloak-postgres:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://0.0.0.0:8080/realms/master" ]
      start_period: 10s
      interval: 30s
      retries: 3
      timeout: 5s
    networks:
      - keycloak-network

  # repainting-api:
  #   container_name: repainting-api
  #   build: repainting__API/.
  #   ports:
  #     - "127.0.0.1:5000:5000"
  #   environment:
  #     SERVER_URL: http://repainting-api
  #     FRONTEND_URL: http://localhost:3000
  #     KEYCLOAK_URL: http://keycloak:8282
  #     POSTGRESQL_REPAINT_GAME_URI: jdbc:postgresql://repaint-game-postgres:5436/repaint_game_db?stringtype=unspecified
  #     POSTGRESQL_REPAINT_GAME_USER: ${POSTGRESQL_REPAINT_GAME_USER}
  #     POSTGRESQL_REPAINT_GAME_PASS: ${POSTGRESQL_REPAINT_GAME_PASS}
  #   volumes:
  #     - ./repainting-api-logs:/app/logs
  #   depends_on:
  #     - repaint-game-postgres
  #   networks:
  #     - repainting-network
  #     - keycloak-network

networks:
  repainting-network:
  keycloak-network:
  user-posts-network: